#include "avcodec/avcodec.h"
#include "avcodec/avcodeccontext.h"
#include "avcodec/avpacket.h"
#include "avcodec/avpicture.h"
#include "avcodec/avsubtitle.h"
#include "avcodec/avsubtitlerect.h"
#include "avutil/samplefmt.h"

using namespace v8;

namespace ffmpeg {
namespace avcodec {

NAN_METHOD(Version) {
  NanScope();

  unsigned ret = avcodec_version();

  NanReturnValue(NanNew<Uint32>(ret));
}

NAN_METHOD(Configuration) {
  NanScope();

  const char* ret = avcodec_configuration();

  if (ret)
    NanReturnValue(NanNew<String>(ret));
  else
    NanReturnEmptyString();
}

NAN_METHOD(License) {
  NanScope();

  const char* ret = avcodec_license();

  if (ret)
    NanReturnValue(NanNew<String>(ret));
  else
    NanReturnEmptyString();
}

void Init(Handle<Object> exports) {
  NanScope();

  avcodec_register_all();

  Local<Object> obj = NanNew<Object>();

  AVCodecID::Init(obj);

  NODE_DEFINE_CONSTANT(obj, AV_CODEC_PROP_INTRA_ONLY);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_PROP_LOSSY);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_PROP_LOSSLESS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_PROP_REORDER);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_PROP_BITMAP_SUB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_PROP_TEXT_SUB);

  NODE_DEFINE_CONSTANT(obj, FF_INPUT_BUFFER_PADDING_SIZE);
  NODE_DEFINE_CONSTANT(obj, FF_MIN_BUFFER_SIZE);

  AVDiscard::Init(obj);
  AVAudioServiceType::Init(obj);

  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_UNALIGNED);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_QSCALE);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_4MV);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_OUTPUT_CORRUPT);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_QPEL);
#if FF_API_GMC
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_GMC);
#endif
#if FF_API_MV0
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_MV0);
#endif
#if FF_API_INPUT_PRESERVED
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_INPUT_PRESERVED);
#endif
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_PASS1);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_PASS2);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_GRAY);
#if FF_API_EMU_EDGE
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_EMU_EDGE);
#endif
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_PSNR);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_TRUNCATED);
#if FF_API_NORMALIZE_AQP
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_NORMALIZE_AQP);
#endif
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_INTERLACED_DCT);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_LOW_DELAY);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_GLOBAL_HEADER);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_BITEXACT);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_AC_PRED);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_LOOP_FILTER);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_INTERLACED_ME);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG_CLOSED_GOP);

  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_FAST);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_NO_OUTPUT);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_LOCAL_HEADER);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_DROP_FRAME_TIMECODE);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_IGNORE_CROP);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_CHUNKS);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_SHOW_ALL);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_EXPORT_MVS);
  NODE_DEFINE_CONSTANT(obj, CODEC_FLAG2_SKIP_MANUAL);

  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_DRAW_HORIZ_BAND);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_DR1);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_TRUNCATED);
#if FF_API_XVMC
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_HWACCEL);
#endif
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_HWACCEL);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_DELAY);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_SMALL_LAST_FRAME);
#if FF_API_CAP_VDPAU
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_HWACCEL_VDPAU);
#endif
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_SUBFRAMES);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_EXPERIMENTAL);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_CHANNEL_CONF);
#if FF_API_NEG_LINESIZES
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_NEG_LINESIZES);
#endif
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_FRAME_THREADS);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_SLICE_THREADS);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_PARAM_CHANGE);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_AUTO_THREADS);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_VARIABLE_FRAME_SIZE);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_INTRA_ONLY);
  NODE_DEFINE_CONSTANT(obj, CODEC_CAP_LOSSLESS);

  AVPacket::Init(obj);

  AVFieldOrder::Init(obj);

  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_UNKNOWN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_RESERVED);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_MAIN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_LOW);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_SSR);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_LTP);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_HE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_HE_V2);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_LD);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_AAC_ELD);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_AAC_LOW);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_AAC_HE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_DTS);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_DTS_ES);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_DTS_96_24);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_DTS_HD_HRA);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_DTS_HD_MA);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_422);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_HIGH);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_SS);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_SNR_SCALABLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_MAIN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG2_SIMPLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_CONSTRAINED);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_INTRA);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_BASELINE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_CONSTRAINED_BASELINE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_MAIN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_EXTENDED);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_10);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_10_INTRA);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_422);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_422_INTRA);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_444);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_444_PREDICTIVE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_HIGH_444_INTRA);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_H264_CAVLC_444);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_VC1_SIMPLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_VC1_MAIN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_VC1_COMPLEX);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_VC1_ADVANCED);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_SIMPLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_SIMPLE_SCALABLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_CORE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_MAIN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_N_BIT);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_SCALABLE_TEXTURE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_HYBRID);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_ADVANCED_REAL_TIME);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_CORE_SCALABLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_ADVANCED_CODING);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_ADVANCED_CORE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_SIMPLE_STUDIO);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_MPEG4_ADVANCED_SIMPLE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_JPEG2000_DCINEMA_2K);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_JPEG2000_DCINEMA_4K);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_HEVC_MAIN);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_HEVC_MAIN_10);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_HEVC_MAIN_STILL_PICTURE);
  NODE_DEFINE_CONSTANT(obj, FF_PROFILE_HEVC_REXT);

  AVCodecContext::Init(obj);
  AVCodec::Init(obj);
  AVPicture::Init(obj);

  AVSubtitleType::Init(obj);

  AVSubtitleRect::Init(obj);
  AVSubtitle::Init(obj);

  AVPictureStructure::Init(obj);

  NODE_SET_METHOD(obj, "version", Version);
  NODE_SET_METHOD(obj, "configuration", Configuration);
  NODE_SET_METHOD(obj, "license", License);

  exports->Set(NanNew("avcodec"), obj);
}


void AVCodecID::Init(Handle<Object> exports) {
  NanScope();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_NONE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MPEG1VIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MPEG2VIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_H261);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_H263);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RV10);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RV20);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MJPEG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MJPEGB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_LJPEG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SP5X);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_JPEGLS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MPEG4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RAWVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSMPEG4V1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSMPEG4V2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSMPEG4V3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMV2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_H263P);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_H263I);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FLV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SVQ1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SVQ3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DVVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_HUFFYUV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CYUV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_H264);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_INDEO3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_THEORA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ASV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ASV2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FFV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_4XM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VCR1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CLJR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MDEC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ROQ);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_INTERPLAY_VIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XAN_WC3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XAN_WC4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RPZA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CINEPAK);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WS_VQA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSRLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSVIDEO1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_IDCIN);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_8BPS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SMC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FLIC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TRUEMOTION1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VMDVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSZH);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ZLIB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_QTRLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TSCC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ULTI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_QDRAW);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VIXL);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_QPEG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PNG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PPM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PBM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PGM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PGMYUV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PAM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FFVHUFF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RV30);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RV40);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VC1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMV3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_LOCO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WNV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AASC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_INDEO2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FRAPS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TRUEMOTION2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BMP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CSCD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MMVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ZMBV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AVS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SMACKVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_NUV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_KMVC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FLASHSV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CAVS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_JPEG2000);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VMNC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP5);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP6);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP6F);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TARGA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSICINVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TIERTEXSEQVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TIFF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_GIF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DXA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DNXHD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_THP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SGI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_C93);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BETHSOFTVID);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PTX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TXD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP6A);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AMV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SUNRAST);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_INDEO4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_INDEO5);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MIMIC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RL2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ESCAPE124);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DIRAC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BFI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CMV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MOTIONPIXELS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TGV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TGQ);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TQI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AURA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AURA2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_V210X);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TMV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_V210);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DPX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MAD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FRWU);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FLASHSV2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CDGRAPHICS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_R210);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ANM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BINKVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_IFF_ILBM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_IFF_BYTERUN1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_KGV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_YOP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP8);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PICTOR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ANSI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_A64_MULTI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_A64_MULTI5);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_R10K);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MXPEG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_LAGARITH);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PRORES);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_JV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DFA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMV3IMAGE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VC1IMAGE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_UTVIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BMV_VIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VBLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DXTORY);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_V410);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XWD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CDXL);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XBM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ZEROCODEC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSS1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSA1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TSCC2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MTS2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CLLC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MSS2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP9);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AIC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ESCAPE130_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_G2M_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WEBP_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_HNM4_VIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_HEVC_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FIC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ALIAS_PIX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BRENDER_PIX_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PAF_VIDEO_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_EXR_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP7_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SANM_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SGIRLE_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MVC1_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MVC2_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_HQX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BRENDER_PIX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_Y41P);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ESCAPE130);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_EXR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AVRP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_012V);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_G2M);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AVUI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AYUV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TARGA_Y216);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_V308);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_V408);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_YUV4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SANM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PAF_VIDEO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AVRN);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CPIA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XFACE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SGIRLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MVC1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MVC2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SNOW);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WEBP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SMVJPEG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_HEVC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_H265);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VP7);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_APNG);

  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FIRST_AUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S16LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S16BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U16LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U16BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S8);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U8);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_MULAW);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_ALAW);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S32LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S32BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U32LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U32BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S24LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S24BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U24LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_U24BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S24DAUD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_ZORK);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S16LE_PLANAR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_DVD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_F32BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_F32LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_F64BE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_F64LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_BLURAY);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_LXF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_S302M);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S8_PLANAR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S24LE_PLANAR_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S32LE_PLANAR_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S24LE_PLANAR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S32LE_PLANAR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PCM_S16BE_PLANAR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_QT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_WAV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_DK3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_DK4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_WS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_SMJPEG);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_MS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_4XM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_XA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_ADX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_EA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_G726);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_CT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_SWF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_YAMAHA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_SBPRO_4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_SBPRO_3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_SBPRO_2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_THP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_AMV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_EA_R1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_EA_R3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_EA_R2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_EA_SEAD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_EA_EACS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_EA_XAS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_EA_MAXIS_XA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_ISS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_G722);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_APC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_VIMA_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_VIMA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_AFC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_OKI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_DTK);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_IMA_RAD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ADPCM_G726LE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AMR_NB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AMR_WB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RA_144);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RA_288);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ROQ_DPCM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_INTERPLAY_DPCM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XAN_DPCM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SOL_DPCM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MP2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MP3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AAC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AC3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DTS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VORBIS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DVAUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMAV1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMAV2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MACE3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MACE6);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VMDAUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FLAC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MP3ADU);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MP3ON4);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SHORTEN);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ALAC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WESTWOOD_SND1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_GSM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_QDM2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_COOK);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TRUESPEECH);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TTA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SMACKAUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_QCELP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WAVPACK);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSICINAUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_IMC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MUSEPACK7);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MLP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_GSM_MS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ATRAC3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_APE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_NELLYMOSER);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MUSEPACK8);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SPEEX);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMAVOICE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMAPRO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WMALOSSLESS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ATRAC3P);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_EAC3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SIPR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MP1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TWINVQ);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TRUEHD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MP4ALS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ATRAC1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BINKAUDIO_RDFT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BINKAUDIO_DCT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_AAC_LATM);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_QDMC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_CELT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_G723_1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_G729);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_8SVX_EXP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_8SVX_FIB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BMV_AUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_RALF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_IAC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ILBC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_OPUS_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_COMFORT_NOISE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TAK_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_METASOUND);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PAF_AUDIO_DEPRECATED);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ON2AVC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSS_SP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FFWAVESYNTH);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SONIC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SONIC_LS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PAF_AUDIO);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_OPUS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TAK);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_EVRC);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SMV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSD_LSBF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSD_MSBF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSD_LSBF_PLANAR);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DSD_MSBF_PLANAR);

  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FIRST_SUBTITLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DVD_SUBTITLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DVB_SUBTITLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TEXT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XSUB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SSA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MOV_TEXT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_HDMV_PGS_SUBTITLE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DVB_TELETEXT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SRT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MICRODVD);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_EIA_608);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_JACOSUB);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SAMI);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_REALTEXT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_STL);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SUBVIEWER1);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SUBVIEWER);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SUBRIP);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_WEBVTT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MPL2);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_VPLAYER);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PJS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_ASS);

  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FIRST_UNKNOWN);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TTF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BINTEXT);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_XBIN);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_IDF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_OTF);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_SMPTE_KLV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_DVD_NAV);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_TIMED_ID3);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_BIN_DATA);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_PROBE);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MPEG2TS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_MPEG4SYSTEMS);
  NODE_DEFINE_CONSTANT(obj, AV_CODEC_ID_FFMETADATA);

  NODE_SET_METHOD(obj, "getBitsPerSample", GetBitsPerSample);
  NODE_SET_METHOD(obj, "getPcmCodec", GetPcmCodec);
  NODE_SET_METHOD(obj, "getExactBitsPerSample", GetExactBitsPerSample);

  exports->Set(NanNew("AVCodecID"), obj);
}

NAN_METHOD(AVCodecID::GetBitsPerSample) {
  NanScope();

  if (!args[0]->IsNumber())
    return NanThrowTypeError("getBitsPerSample: AVCodecID enum required");

  enum ::AVCodecID codec_id =
    static_cast<enum ::AVCodecID>(args[0]->Uint32Value());

  int ret = av_get_bits_per_sample(codec_id);
  NanReturnValue(NanNew<Int32>(ret));
}

NAN_METHOD(AVCodecID::GetPcmCodec) {
  NanScope();

  if (!args[0]->IsNumber())
    return NanThrowTypeError("getPcmCodec: AVSampleFormat enum required");
  if (!args[1]->IsNumber())
    return NanThrowTypeError("getPcmCodec: be integer required");

  enum ::AVSampleFormat fmt =
    static_cast<enum ::AVSampleFormat>(args[0]->Int32Value());
  int be = args[1]->Uint32Value();
  enum ::AVCodecID ret = av_get_pcm_codec(fmt, be);
  NanReturnValue(NanNew<Uint32>(ret));
}

NAN_METHOD(AVCodecID::GetExactBitsPerSample) {
  NanScope();

  if (!args[0]->IsNumber())
    return NanThrowTypeError("getExactBitsPerSample: AVCodecID enum required");

  enum ::AVCodecID codec_id =
    static_cast<enum ::AVCodecID>(args[0]->Uint32Value());

  int ret = av_get_exact_bits_per_sample(codec_id);
  NanReturnValue(NanNew<Int32>(ret));
}

void AVDiscard::Init(Handle<Object> exports) {
  NanScope();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, AVDISCARD_NONE);
  NODE_DEFINE_CONSTANT(obj, AVDISCARD_DEFAULT);
  NODE_DEFINE_CONSTANT(obj, AVDISCARD_NONREF);
  NODE_DEFINE_CONSTANT(obj, AVDISCARD_BIDIR);
  NODE_DEFINE_CONSTANT(obj, AVDISCARD_NONINTRA);
  NODE_DEFINE_CONSTANT(obj, AVDISCARD_NONKEY);
  NODE_DEFINE_CONSTANT(obj, AVDISCARD_ALL);

  exports->Set(NanNew("AVDiscard"), obj);
}

void AVAudioServiceType::Init(Handle<Object> exports) {
  NanScope();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_MAIN);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_EFFECTS);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_DIALOGUE);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_COMMENTARY);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_EMERGENCY);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_VOICE_OVER);
  NODE_DEFINE_CONSTANT(obj, AV_AUDIO_SERVICE_TYPE_KARAOKE);

  exports->Set(NanNew("AVAudioServiceType"), obj);
}

void AVFieldOrder::Init(Handle<Object> exports) {
  NanScope();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, AV_FIELD_UNKNOWN);
  NODE_DEFINE_CONSTANT(obj, AV_FIELD_PROGRESSIVE);
  NODE_DEFINE_CONSTANT(obj, AV_FIELD_TT);
  NODE_DEFINE_CONSTANT(obj, AV_FIELD_BB);
  NODE_DEFINE_CONSTANT(obj, AV_FIELD_TB);
  NODE_DEFINE_CONSTANT(obj, AV_FIELD_BT);

  exports->Set(NanNew("AVFieldOrder"), obj);
}

void AVSubtitleType::Init(Handle<Object> exports) {
  NanScope();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, SUBTITLE_NONE);
  NODE_DEFINE_CONSTANT(obj, SUBTITLE_BITMAP);
  NODE_DEFINE_CONSTANT(obj, SUBTITLE_TEXT);
  NODE_DEFINE_CONSTANT(obj, SUBTITLE_ASS);

  exports->Set(NanNew("AVSubtitleType"), obj);
}

void AVPictureStructure::Init(Handle<Object> exports) {
  NanScope();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, AV_PICTURE_STRUCTURE_UNKNOWN);
  NODE_DEFINE_CONSTANT(obj, AV_PICTURE_STRUCTURE_TOP_FIELD);
  NODE_DEFINE_CONSTANT(obj, AV_PICTURE_STRUCTURE_BOTTOM_FIELD);
  NODE_DEFINE_CONSTANT(obj, AV_PICTURE_STRUCTURE_FRAME);

  exports->Set(NanNew("AVPictureStructure"), obj);
}


Persistent<FunctionTemplate> AVCodec::constructor;

void AVCodec::Init(Handle<Object> exports) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(New);
  tpl->SetClassName(NanNew("AVCodec"));
  tpl->InstanceTemplate()->SetInternalFieldCount(1);

  Local<ObjectTemplate> inst = tpl->InstanceTemplate();

  inst->SetAccessor(NanNew("is_encoder"), GetIsEncoder);
  inst->SetAccessor(NanNew("is_decoder"), GetIsDecoder);
  inst->SetAccessor(NanNew("name"), GetName);
  inst->SetAccessor(NanNew("long_name"), GetLongName);
  inst->SetAccessor(NanNew("type"), GetType);
  inst->SetAccessor(NanNew("id"), GetId);
  inst->SetAccessor(NanNew("capabilities"), GetCapabilities);
  inst->SetAccessor(NanNew("supported_framerates"), GetSupportedFramerates);
  inst->SetAccessor(NanNew("pix_fmts"), GetPixFmts);
  inst->SetAccessor(NanNew("supported_samplerates"), GetSupportedSamplerates);
  inst->SetAccessor(NanNew("sample_fmts"), GetSampleFmts);
  inst->SetAccessor(NanNew("channel_layouts"), GetChannelLayouts);
  inst->SetAccessor(NanNew("max_lowres"), GetMaxLowres);
  inst->SetAccessor(NanNew("profiles"), GetProfiles);

  NODE_SET_METHOD(tpl->GetFunction(), "findDecoder", FindDecoder);
  NODE_SET_METHOD(tpl->GetFunction(), "findEncoder", FindEncoder);
  NODE_SET_METHOD(tpl->GetFunction(), "getMediaType", GetMediaType);
  NODE_SET_METHOD(tpl->GetFunction(), "getCodecName", GetCodecName);

  NanAssignPersistent(constructor, tpl);

  NODE_SET_METHOD(exports, "codecs", GetCodecs);
  NODE_SET_METHOD(exports, "findDecoder", FindDecoder);
  NODE_SET_METHOD(exports, "findEncoder", FindEncoder);
  NODE_SET_METHOD(exports, "getMediaType", GetMediaType);
  NODE_SET_METHOD(exports, "getCodecName", GetCodecName);
}

Local<Object> AVCodec::NewInstance(::AVCodec* wrap) {
  NanEscapableScope();

  Local<Function> cons = NanNew(constructor)->GetFunction();
  Local<Object> instance = cons->NewInstance(0, nullptr);
  ObjectWrap::Unwrap<AVCodec>(instance)->This(wrap);

  return NanEscapeScope(instance);
}

bool AVCodec::HasInstance(Handle<Value> value) {
  if (!value->IsObject()) return false;
  Local<Object> obj = value->ToObject();
  return NanHasInstance(constructor, obj);
}

::AVCodec* AVCodec::This(::AVCodec* wrap) {
  if (wrap != nullptr) this_ = wrap;
  return this_;
}

NAN_METHOD(AVCodec::GetCodecs) {
  NanScope();

  ::AVCodec* codec = nullptr;
  int size = 0;

  while ((codec = av_codec_next(codec))) size++;

  Local<Array> ret = NanNew<Array>(size);
  codec = nullptr;
  for (int i = 0; i < size; i++) {
    codec = av_codec_next(codec);
    ret->Set(i, NewInstance(codec));
  }

  if (size > 0)
    NanReturnValue(ret);
  else
    NanReturnNull();
}

NAN_METHOD(AVCodec::FindDecoder) {
  NanScope();

  if (!args[0]->IsNumber() && !args[0]->IsString())
    return NanThrowTypeError("findDecoder: codec id or codec name required");

  ::AVCodec* codec = nullptr;

  if (args[0]->IsNumber()) {
    enum ::AVCodecID codec_id =
      static_cast<enum ::AVCodecID>(args[0]->Uint32Value());
    codec = avcodec_find_decoder(codec_id);
  }
  if (args[0]->IsString()) {
    NanUtf8String codec_name(args[0]);
    codec = avcodec_find_decoder_by_name(*codec_name);
  }

  if (codec)
    NanReturnValue(AVCodec::NewInstance(codec));
  else
    NanReturnNull();
}

NAN_METHOD(AVCodec::FindEncoder) {
  NanScope();

  if (!args[0]->IsNumber() && !args[0]->IsString())
    return NanThrowTypeError("findEncoder: codec id or codec name required");

  ::AVCodec* codec = nullptr;

  if (args[0]->IsNumber()) {
    enum ::AVCodecID codec_id =
      static_cast<enum ::AVCodecID>(args[0]->Uint32Value());
    codec = avcodec_find_encoder(codec_id);
  }
  if (args[0]->IsString()) {
    NanUtf8String codec_name(args[0]);
    codec = avcodec_find_encoder_by_name(*codec_name);
  }

  if (codec)
    NanReturnValue(AVCodec::NewInstance(codec));
  else
    NanReturnNull();
}

NAN_METHOD(AVCodec::GetMediaType) {
  NanScope();

  if (!args[0]->IsNumber())
    return NanThrowTypeError("getMediaType: codec_id enum required");

  enum ::AVCodecID codec_id =
    static_cast<enum ::AVCodecID>(args[0]->Uint32Value());
  enum ::AVMediaType type = avcodec_get_type(codec_id);
  NanReturnValue(NanNew<Int32>(type));
}

NAN_METHOD(AVCodec::GetCodecName) {
  NanScope();

  if (!args[0]->IsNumber())
    return NanThrowTypeError("getCodecName: codec_id enum required");

  enum ::AVCodecID codec_id =
    static_cast<enum ::AVCodecID>(args[0]->Uint32Value());
  const char* name = avcodec_get_name(codec_id);
  if (name)
    NanReturnValue(NanNew<String>(name));
  else
    NanReturnEmptyString();
}

NAN_METHOD(AVCodec::New) {
  NanScope();

  if (args.IsConstructCall()) {
    AVCodec* obj = new AVCodec();
    obj->Wrap(args.This());
    NanReturnValue(args.This());
  } else {
    NanReturnUndefined();
  }
}

NAN_GETTER(AVCodec::GetIsEncoder) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  int is_encoder = av_codec_is_encoder(wrap);
  NanReturnValue(NanNew<Boolean>(is_encoder));
}

NAN_GETTER(AVCodec::GetIsDecoder) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  int is_decoder = av_codec_is_decoder(wrap);
  NanReturnValue(NanNew<Boolean>(is_decoder));
}

NAN_GETTER(AVCodec::GetName) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const char* name = wrap->name;
  if (name)
    NanReturnValue(NanNew<String>(name));
  else
    NanReturnEmptyString();
}

NAN_GETTER(AVCodec::GetLongName) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const char* long_name = wrap->long_name;
  if (long_name)
    NanReturnValue(NanNew<String>(long_name));
  else
    NanReturnEmptyString();
}

NAN_GETTER(AVCodec::GetType) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  enum ::AVMediaType type = wrap->type;
  NanReturnValue(NanNew<Int32>(type));
}

NAN_GETTER(AVCodec::GetId) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  enum ::AVCodecID id = wrap->id;
  NanReturnValue(NanNew<Uint32>(id));
}

NAN_GETTER(AVCodec::GetCapabilities) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  int capabilities = wrap->capabilities;
  NanReturnValue(NanNew<Int32>(capabilities));
}

NAN_GETTER(AVCodec::GetSupportedFramerates) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const ::AVRational* framerates = wrap->supported_framerates;
  uint32_t size = 0;

  if (framerates != nullptr) {
    while (framerates[size].num != 0 || framerates[size].den != 0) size++;
  }

  Local<Array> ret = NanNew<Array>(size);
  for (uint32_t i = 0; i < size; i++) {
    Local<Object> framerate = NanNew<Object>();
    framerate->Set(NanNew("num"), NanNew<Int32>(framerates[i].num));
    framerate->Set(NanNew("den"), NanNew<Int32>(framerates[i].den));
    ret->Set(i, framerate);
  }

  NanReturnValue(ret);
}

NAN_GETTER(AVCodec::GetPixFmts) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const enum ::AVPixelFormat* pix_fmts = wrap->pix_fmts;
  uint32_t size = 0;

  if (pix_fmts != nullptr) {
    while (pix_fmts[size] != -1) size++;
  }

  Local<Array> ret = NanNew<Array>(size);
  for (uint32_t i = 0; i < size; i++) {
    ret->Set(i, NanNew<Int32>(pix_fmts[i]));
  }

  NanReturnValue(ret);
}

NAN_GETTER(AVCodec::GetSupportedSamplerates) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const int* samplerates = wrap->supported_samplerates;
  uint32_t size = 0;

  if (samplerates != nullptr) {
    while (samplerates[size] != 0) size++;
  }

  Local<Array> ret = NanNew<Array>(size);
  for (uint32_t i = 0; i < size; i++) {
    ret->Set(i, NanNew<Int32>(samplerates[i]));
  }

  NanReturnValue(ret);
}

NAN_GETTER(AVCodec::GetSampleFmts) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const enum ::AVSampleFormat* sample_fmts = wrap->sample_fmts;
  uint32_t size = 0;

  if (sample_fmts != nullptr) {
    while (sample_fmts[size] != -1) size++;
  }

  Local<Array> ret = NanNew<Array>(size);
  for (uint32_t i = 0; i < size; i++) {
    ret->Set(i, NanNew<Int32>(sample_fmts[i]));
  }

  NanReturnValue(ret);
}

NAN_GETTER(AVCodec::GetChannelLayouts) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const uint64_t* channel_layouts = wrap->channel_layouts;
  uint32_t size = 0;

  if (channel_layouts != nullptr) {
    while (channel_layouts[size] != 0) size++;
  }

  Local<Array> ret = NanNew<Array>(size);
  for (uint32_t i = 0; i < size; i++) {
    ret->Set(i, NanNew<Number>(channel_layouts[i]));
  }

  NanReturnValue(ret);
}

NAN_GETTER(AVCodec::GetMaxLowres) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  int max_lowres = av_codec_get_max_lowres(wrap);
  NanReturnValue(NanNew<Int32>(max_lowres));
}

NAN_GETTER(AVCodec::GetProfiles) {
  NanScope();

  ::AVCodec* wrap = Unwrap<AVCodec>(args.This())->This();
  if (wrap == nullptr)
    NanReturnUndefined();

  const ::AVProfile* profiles = wrap->profiles;
  uint32_t size = 0;

  if (profiles != nullptr) {
    while (profiles[size].profile != FF_PROFILE_UNKNOWN) size++;
  }

  Local<Array> ret = NanNew<Array>(size);
  for (uint32_t i = 0; i < size; i++) {
    Local<Object> profile = NanNew<Object>();
    profile->Set(NanNew("profile"), NanNew<Int32>(profiles[i].profile));
    profile->Set(NanNew("name"), NanNew<String>(profiles[i].name));
    ret->Set(i, profile);
  }

  NanReturnValue(ret);
}

}  // namespace avcodec
}  // namespace ffmpeg

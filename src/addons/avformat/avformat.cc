#include "avformat/avformat.h"
#include "avformat/avinputformat.h"
#include "avformat/avoutputformat.h"
#include "avformat/avformatcontext.h"

using namespace v8;

namespace ffmpeg {
namespace avformat {

void AVFormat::Init(Handle<Object> exports) {
  NanScope();

  av_register_all();
  avformat_network_init();

  Local<Object> obj = NanNew<Object>();

  NODE_DEFINE_CONSTANT(obj, AVPROBE_SCORE_RETRY);
  NODE_DEFINE_CONSTANT(obj, AVPROBE_SCORE_STREAM_RETRY);
  NODE_DEFINE_CONSTANT(obj, AVPROBE_SCORE_EXTENSION);
  NODE_DEFINE_CONSTANT(obj, AVPROBE_SCORE_MIME);
  NODE_DEFINE_CONSTANT(obj, AVPROBE_SCORE_MAX);
  NODE_DEFINE_CONSTANT(obj, AVPROBE_PADDING_SIZE);

  NODE_DEFINE_CONSTANT(obj, AVFMT_NOFILE);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NEEDNUMBER);
  NODE_DEFINE_CONSTANT(obj, AVFMT_SHOW_IDS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_RAWPICTURE);
  NODE_DEFINE_CONSTANT(obj, AVFMT_GLOBALHEADER);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NOTIMESTAMPS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_GENERIC_INDEX);
  NODE_DEFINE_CONSTANT(obj, AVFMT_TS_DISCONT);
  NODE_DEFINE_CONSTANT(obj, AVFMT_VARIABLE_FPS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NODIMENSIONS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NOSTREAMS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NOBINSEARCH);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NOGENSEARCH);
  NODE_DEFINE_CONSTANT(obj, AVFMT_NO_BYTE_SEEK);
  NODE_DEFINE_CONSTANT(obj, AVFMT_ALLOW_FLUSH);
  NODE_DEFINE_CONSTANT(obj, AVFMT_TS_NONSTRICT);
  NODE_DEFINE_CONSTANT(obj, AVFMT_TS_NEGATIVE);
  NODE_DEFINE_CONSTANT(obj, AVFMT_SEEK_TO_PTS);

  NODE_DEFINE_CONSTANT(obj, AVSTREAM_PARSE_NONE);
  NODE_DEFINE_CONSTANT(obj, AVSTREAM_PARSE_FULL);
  NODE_DEFINE_CONSTANT(obj, AVSTREAM_PARSE_HEADERS);
  NODE_DEFINE_CONSTANT(obj, AVSTREAM_PARSE_TIMESTAMPS);
  NODE_DEFINE_CONSTANT(obj, AVSTREAM_PARSE_FULL_ONCE);
  NODE_DEFINE_CONSTANT(obj, AVSTREAM_PARSE_FULL_RAW);

  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_DEFAULT);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_DUB);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_ORIGINAL);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_COMMENT);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_LYRICS);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_KARAOKE);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_FORCED);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_HEARING_IMPAIRED);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_VISUAL_IMPAIRED);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_CLEAN_EFFECTS);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_ATTACHED_PIC);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_CAPTIONS);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_DESCRIPTIONS);
  NODE_DEFINE_CONSTANT(obj, AV_DISPOSITION_METADATA);

  NODE_DEFINE_CONSTANT(obj, AV_PTS_WRAP_IGNORE);
  NODE_DEFINE_CONSTANT(obj, AV_PTS_WRAP_ADD_OFFSET);
  NODE_DEFINE_CONSTANT(obj, AV_PTS_WRAP_SUB_OFFSET);

  AVInputFormat::Init(obj);
  AVOutputFormat::Init(obj);

  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_GENPTS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_IGNIDX);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_NONBLOCK);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_IGNDTS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_NOFILLIN);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_NOPARSE);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_NOBUFFER);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_CUSTOM_IO);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_DISCARD_CORRUPT);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_FLUSH_PACKETS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_BITEXACT);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_MP4A_LATM);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_SORT_DTS);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_PRIV_OPT);
  NODE_DEFINE_CONSTANT(obj, AVFMT_FLAG_KEEP_SIDE_DATA);

/*
  AVStream::Init(obj);
  AVProgram::Init(obj);
  AVChapter::Init(obj);
*/
  AVFormatContext::Init(obj);

  NODE_DEFINE_CONSTANT(obj, AVSEEK_FLAG_BACKWARD);
  NODE_DEFINE_CONSTANT(obj, AVSEEK_FLAG_BYTE);
  NODE_DEFINE_CONSTANT(obj, AVSEEK_FLAG_ANY);
  NODE_DEFINE_CONSTANT(obj, AVSEEK_FLAG_FRAME);

  exports->Set(NanNew("avformat"), obj);
}

NAN_METHOD(AVFormat::Version) {
  NanEscapableScope();

  unsigned ret = avformat_version();

  NanReturnValue(NanNew<Integer>(ret));
}

NAN_METHOD(AVFormat::Configuration) {
  NanEscapableScope();

  const char *ret = avformat_configuration();

  if (ret)
    NanReturnValue(NanNew<String>(ret));
  else
    NanReturnEmptyString();
}

NAN_METHOD(AVFormat::License) {
  NanEscapableScope();

  const char *ret = avformat_license();

  if (ret)
    NanReturnValue(NanNew<String>(ret));
  else
    NanReturnEmptyString();
}

}  // namespace avformat
}  // namespace ffmpeg
